6.1 
function Vector(x, y) {
	this.x = x;
	this.y = y;
};

Vector.prototype.plus = function(vector) {
	return new Vector(this.x + vector.x, this.y + vector.y);
};

Vector.prototype.minus = function(vector) {
	return new Vector(this.x - vector.x, this.y - vector.y);
};

Object.defineProperty(Vector.prototype, "length", {
	get: function() {
		return Math.sqrt( Math.pow(this.x, 2) + Math.pow(this.y, 2) )
	}
});
6.2
function repeat(string, times) {
	let result = "";
	for (let i = 0; i < times; ++i)
		result += string;
	return result;
}

function TextCell(text) {
	this.text = text.split("\n");
}

TextCell.prototype.minWidth = function() {
	return this.text.reduce(function(width, line) {
		return Math.max(width, line.length);
	}, 0);
};
TextCell.prototype.minHeight = function() {
	return this.text.length;
};
TextCell.prototype.draw = function(width, height) {
	let result = [];

	for (let i = 0; i < height; ++i) {
		let line = this.text[i] || "";
		result.push(line + repeat(" ", width - line.length));
	}
	return result;
};


function StretchCell(inner, width, height) {
	this.inner = inner;
	this.width = width;
	this.height = height;
}

StretchCell.prototype.minWidth = function() {
	return Math.max(this.width, this.inner.minWidth());
};
StretchCell.prototype.minHeight = function() {
	return Math.max(this.height, this.inner.minHeight());
};
StretchCell.prototype.draw = function(width, height) {
	return this.inner.draw(width, height);
}
6.3
function ArraySeq(collection) {
  this.values = collection;
}

ArraySeq.prototype.iterate = function(start, end, action) {
  let n = Math.min(this.values.length, end);
  for (let i = start; i < n; i++) {
    action(this.values[i]);
  }
};

function RangeSeq(from, to) {
  let array = [];
  for (let i = from; i <= to; i++)
    array.push(i);
  ArraySeq.call(this, array);
}

RangeSeq.prototype = Object.create(ArraySeq.prototype);

function logFive(sequenceObject) {
 sequenceObject.iterate(0, 5, console.log);
}
